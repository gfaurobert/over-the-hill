#!/bin/bash

# Supabase Container Manager (sbContMan)
# Usage: ./sbContMan [stop|delete] [container_name_pattern]
# Example: ./sbContMan stop tim
# Example: ./sbContMan delete tim

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to show usage
show_usage() {
    echo "Supabase Container Manager (sbContMan)"
    echo ""
    echo "Usage: $0 [stop|delete] [container_name_pattern]"
    echo ""
    echo "Commands:"
    echo "  stop   - Stop containers matching the pattern"
    echo "  delete - Delete containers and volumes matching the pattern"
    echo ""
    echo "Examples:"
    echo "  $0 stop tim     - Stop all containers with 'tim' in the name"
    echo "  $0 delete tim   - Delete all containers and volumes with 'tim' in the name"
    echo ""
    echo "Note: The script will search for containers containing the pattern in their names"
}

# Function to find containers matching pattern
find_containers() {
    local pattern=$1
    docker ps -a --format "table {{.Names}}" | grep -i "supabase" | awk -F'_' -v pattern="$pattern" '$NF == pattern'
}

# Function to get container IDs matching pattern
get_container_ids() {
    local pattern=$1
    docker ps -a --format "{{.Names}}" | grep -i "supabase" | awk -F'_' -v pattern="$pattern" '$NF == pattern' | xargs -I {} docker ps -aq --filter "name={}"
}

# Function to stop containers
stop_containers() {
    local pattern=$1
    local containers=$(get_container_ids "$pattern")
    
    if [ -z "$containers" ]; then
        print_color $YELLOW "No containers found matching pattern: $pattern"
        return
    fi
    
    print_color $BLUE "Found containers matching '$pattern':"
    find_containers "$pattern"
    echo ""
    
    print_color $YELLOW "Do you want to stop these containers? (y/N): "
    read -r response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        print_color $BLUE "Stopping containers..."
        echo "$containers" | xargs -r docker stop
        print_color $GREEN "Containers stopped successfully!"
    else
        print_color $YELLOW "Operation cancelled."
    fi
}

# Function to delete containers and volumes
delete_containers() {
    local pattern=$1
    local containers=$(get_container_ids "$pattern")
    
    if [ -z "$containers" ]; then
        print_color $YELLOW "No containers found matching pattern: $pattern"
        return
    fi
    
    print_color $BLUE "Found containers matching '$pattern':"
    find_containers "$pattern"
    echo ""
    
    print_color $RED "WARNING: This will delete containers AND their volumes!"
    print_color $YELLOW "Do you want to proceed with deletion? (y/N): "
    read -r response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        print_color $BLUE "Deleting containers and volumes..."
        echo "$containers" | xargs -r docker rm -f -v
        print_color $GREEN "Containers and volumes deleted successfully!"
    else
        print_color $YELLOW "Operation cancelled."
    fi
}

# Function to check if Docker is running
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        print_color $RED "Error: Docker is not running or not accessible"
        print_color $YELLOW "Please start Docker and try again"
        exit 1
    fi
}

# Main script logic
main() {
    # Check if Docker is running
    check_docker
    
    # Check arguments
    if [ $# -ne 2 ]; then
        print_color $RED "Error: Invalid number of arguments"
        echo ""
        show_usage
        exit 1
    fi
    
    local action=$1
    local pattern=$2
    
    # Validate action
    case "$action" in
        "stop")
            print_color $BLUE "Stopping containers matching pattern: $pattern"
            stop_containers "$pattern"
            ;;
        "delete")
            print_color $BLUE "Deleting containers matching pattern: $pattern"
            delete_containers "$pattern"
            ;;
        *)
            print_color $RED "Error: Invalid action '$action'"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
