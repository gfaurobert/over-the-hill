-- TEMPORARY Migration to encrypted schema - SECURITY WARNING
-- This migration is marked as TEMPORARY and should NOT be deployed to production
-- 
-- SECURITY ISSUE: This migration uses base64 encoding instead of proper encryption
-- Base64 encoding is reversible and does NOT protect data confidentiality
-- 
-- RECOMMENDED ACTION: 
-- 1. Mark this migration as temporary/development only
-- 2. Create a follow-up migration that implements proper cryptographic encryption
-- 3. Use pgp_sym_encrypt or pgp_pub_encrypt from pgcrypto extension
-- 4. Handle IV/nonce values properly alongside encrypted data
-- 5. Only deploy to production after implementing true encryption
--
-- This migration handles the transition from plain text to encrypted data storage

-- First, create temporary tables to store the old data
CREATE TEMP TABLE temp_collections AS 
SELECT id, name, user_id, created_at, updated_at, 
       COALESCE(status, 'active') as status,
       archived_at, deleted_at
FROM collections;

CREATE TEMP TABLE temp_dots AS 
SELECT id, label, x, y, color, size, user_id, collection_id, created_at, updated_at,
       COALESCE(archived, false) as archived
FROM dots;

CREATE TEMP TABLE temp_snapshots AS 
SELECT id, user_id, collection_id, collection_name, created_at, dots_data
FROM snapshots;

-- Drop the old tables
DROP TABLE IF EXISTS access_requests CASCADE;
DROP TABLE IF EXISTS user_preferences CASCADE;
DROP TABLE IF EXISTS snapshots CASCADE;
DROP TABLE IF EXISTS dots CASCADE;
DROP TABLE IF EXISTS collections CASCADE;

-- Recreate tables with encrypted schema (this should match the main migration)
-- Create collections table with encrypted name field
CREATE TABLE collections (
    id TEXT PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    name_encrypted TEXT NOT NULL, -- Encrypted collection name
    name_hash TEXT NOT NULL, -- Hash for searching without decryption
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'archived', 'deleted')),
    archived_at TIMESTAMP WITH TIME ZONE,
    deleted_at TIMESTAMP WITH TIME ZONE,
    UNIQUE(user_id, name_hash)
);

-- Create dots table with encrypted label field
CREATE TABLE dots (
    id TEXT NOT NULL,
    collection_id TEXT REFERENCES collections(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    label_encrypted TEXT NOT NULL, -- Encrypted dot label
    label_hash TEXT NOT NULL, -- Hash for searching without decryption
    x DECIMAL(10, 7) NOT NULL,
    y DECIMAL(10, 7) NOT NULL,
    color TEXT NOT NULL DEFAULT '#3b82f6',
    size INTEGER NOT NULL DEFAULT 3 CHECK (size >= 1 AND size <= 5),
    archived BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    PRIMARY KEY (id, collection_id)
);

-- Create snapshots table with encrypted data
CREATE TABLE snapshots (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    collection_id TEXT REFERENCES collections(id) ON DELETE CASCADE NOT NULL,
    collection_name_encrypted TEXT NOT NULL, -- Encrypted collection name
    created_at TIMESTAMP WITH TIME ZONE NOT NULL,
    snapshot_date TEXT NOT NULL,
    dots_data_encrypted TEXT NOT NULL, -- Encrypted dots data
    UNIQUE(user_id, collection_id, created_at)
);

-- Create user_preferences table
CREATE TABLE user_preferences (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL UNIQUE,
    selected_collection_id TEXT REFERENCES collections(id) ON DELETE SET NULL,
    collection_input_encrypted TEXT DEFAULT '', -- Encrypted collection input
    hide_collection_name BOOLEAN DEFAULT FALSE,
    copy_format TEXT DEFAULT 'PNG' CHECK (copy_format IN ('PNG', 'SVG')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Create access_requests table
CREATE TABLE access_requests (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    email TEXT NOT NULL,
    message_encrypted TEXT DEFAULT '', -- Encrypted message
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'denied')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    UNIQUE(email)
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_collections_user_id ON collections(user_id);
CREATE INDEX IF NOT EXISTS idx_collections_status ON collections(status);
CREATE INDEX IF NOT EXISTS idx_dots_collection_id ON dots(collection_id);
CREATE INDEX IF NOT EXISTS idx_dots_user_id ON dots(user_id);
CREATE INDEX IF NOT EXISTS idx_snapshots_user_id ON snapshots(user_id);
CREATE INDEX IF NOT EXISTS idx_snapshots_collection_id ON snapshots(collection_id);
CREATE INDEX IF NOT EXISTS idx_snapshots_created_at ON snapshots(created_at);
CREATE INDEX IF NOT EXISTS idx_access_requests_email ON access_requests(email);
CREATE INDEX IF NOT EXISTS idx_access_requests_status ON access_requests(status);
CREATE INDEX IF NOT EXISTS idx_access_requests_created_at ON access_requests(created_at);

-- Create triggers
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_collections_updated_at BEFORE UPDATE ON collections
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_dots_updated_at BEFORE UPDATE ON dots
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_preferences_updated_at BEFORE UPDATE ON user_preferences
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_access_requests_updated_at BEFORE UPDATE ON access_requests
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- TEMPORARY DATA MIGRATION - SECURITY WARNING
-- WARNING: This section uses base64 encoding which is NOT encryption
-- Base64 encoding is reversible and provides NO data confidentiality protection
-- 
-- This is a temporary solution for development/testing only
-- For production, implement proper cryptographic encryption using pgcrypto functions
-- 
-- Migrate collections data with TEMPORARY base64 encoding (NOT encryption)
-- Note: This will use simple base64 encoding as a fallback since we can't encrypt without user keys
INSERT INTO collections (id, user_id, name_encrypted, name_hash, created_at, updated_at, status, archived_at, deleted_at)
SELECT 
    id,
    user_id,
    encode(name::bytea, 'base64') as name_encrypted,
    encode(digest(lower(trim(name)), 'sha256'), 'hex') as name_hash,
    created_at,
    updated_at,
    status,
    archived_at,
    deleted_at
FROM temp_collections;

-- Migrate dots data with TEMPORARY base64 encoding (NOT encryption)
INSERT INTO dots (id, collection_id, user_id, label_encrypted, label_hash, x, y, color, size, archived, created_at, updated_at)
SELECT 
    id,
    collection_id,
    user_id,
    encode(label::bytea, 'base64') as label_encrypted,
    encode(digest(lower(trim(label)), 'sha256'), 'hex') as label_hash,
    x,
    y,
    color,
    size,
    archived,
    created_at,
    updated_at
FROM temp_dots;

-- Migrate snapshots data with TEMPORARY base64 encoding (NOT encryption)
INSERT INTO snapshots (id, user_id, collection_id, collection_name_encrypted, created_at, snapshot_date, dots_data_encrypted)
SELECT 
    id,
    user_id,
    collection_id,
    encode(collection_name::bytea, 'base64') as collection_name_encrypted,
    created_at,
    to_char(created_at, 'YYYY-MM-DD') as snapshot_date,
    encode(dots_data::text::bytea, 'base64') as dots_data_encrypted
FROM temp_snapshots;

-- Set up RLS policies
CREATE POLICY "Users can view their own collections" ON collections
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own collections" ON collections
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own collections" ON collections
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own collections" ON collections
    FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Users can view dots from their collections" ON dots
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert dots in their collections" ON dots
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update dots in their collections" ON dots
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete dots in their collections" ON dots
    FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Users can view their own snapshots" ON snapshots
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own snapshots" ON snapshots
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own snapshots" ON snapshots
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own snapshots" ON snapshots
    FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Users can view their own preferences" ON user_preferences
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own preferences" ON user_preferences
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own preferences" ON user_preferences
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own user_preferences" ON user_preferences
    FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Anyone can submit access requests" ON access_requests
    FOR INSERT WITH CHECK (true);

CREATE POLICY "Only service role can manage access requests" ON access_requests
    FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');

-- Enable RLS
ALTER TABLE collections ENABLE ROW LEVEL SECURITY;
ALTER TABLE dots ENABLE ROW LEVEL SECURITY;
ALTER TABLE snapshots ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_preferences ENABLE ROW LEVEL SECURITY;
ALTER TABLE access_requests ENABLE ROW LEVEL SECURITY;

-- Clean up temporary tables
DROP TABLE temp_collections;
DROP TABLE temp_dots;
DROP TABLE temp_snapshots;

-- ============================================================================
-- CRITICAL SECURITY WARNING - PRODUCTION DEPLOYMENT BLOCKED
-- ============================================================================
--
-- This migration has been marked as TEMPORARY and should NOT be deployed to production
-- due to critical security vulnerabilities:
--
-- 1. BASE64 ENCODING IS NOT ENCRYPTION
--    - All sensitive data (names, labels, messages) are stored using base64 encoding
--    - Base64 encoding is easily reversible and provides ZERO data confidentiality
--    - Anyone with database access can decode and read the "encrypted" data
--
-- 2. REQUIRED FOLLOW-UP ACTIONS BEFORE PRODUCTION:
--    a) Create a new migration that implements proper cryptographic encryption
--    b) Use pgp_sym_encrypt or pgp_pub_encrypt from pgcrypto extension
--    c) Handle IV/nonce values properly alongside encrypted data
--    d) Implement proper key management for user-specific encryption keys
--    e) Re-encrypt all existing base64-encoded data with proper encryption
--
-- 3. RECOMMENDED ENCRYPTION APPROACH:
--    - Use pgp_sym_encrypt for symmetric encryption with user-specific keys
--    - Store encrypted data as base64-encoded text (as done in main schema)
--    - Implement proper key derivation and management
--    - Ensure all sensitive fields are properly encrypted before production
--
-- 4. IMMEDIATE ACTIONS:
--    - Mark this migration as development/testing only
--    - Create follow-up migration: 20250725000001_implement_proper_encryption.sql
--    - Test encryption/decryption functions thoroughly
--    - Validate data integrity after re-encryption
--
-- ============================================================================
-- END OF TEMPORARY MIGRATION - DO NOT DEPLOY TO PRODUCTION
-- ============================================================================
